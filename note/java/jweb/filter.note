filter 也称为过滤器，上servlet技术中最激动人心的技术，开发人员可以通过filter技术，对web服务器管理所有web资源
例如：权限访问控制 过滤敏感词汇 压缩响应信息

实现filter接口
init() 初始化
destroy() 销毁
doFilter() 核心

public class FilterDemo1 implements Filter {
	public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {
		chain.doFilter(request, response); // 放行 下一个filter执行
	}

	public void init(FilterConfig filterConfig) throws ServletException {
		String value = filterConfig.getInitParameter("xxx");
		System.out.println(value);
	}

	public void destroy() {
	}
}

<filter>
	<filter-name></filter-name>
	<filter-class></filter-class>
</filter>
<filter-mapping>
	<filter-name></filter-name>
	<url-pattern></url-pattern>
</filter-mapping>

常见应用
1. 在目标资源执行之前，进行权限检查
2. 在目标文件执行之前可以做一些预处理，例如解决乱码问题
3. 在filter放行之后，可以捕获到目标资源的输出，获取网站输出的内容，压缩后输出

filter链
按配置顺序执行

服务器创建时 执行init方法
<init-param> 中配置初始化参数

禁止缓存所有动态页面的数据
public void doFilter(ServletRequest req, ServletResponse resp) {
	HttpServletRequest request = (HttpServletRequest)req;
	HttpServletResponse response = (HttpServletResponse)resp;

	response.setDateHeader("Expires", -1);
	response.setHeader("Cache-Control", "no-cache");
	response.setHeader("Paragma", "no-cache");
	chain.doFilter(req, resp);
}

控制浏览器缓存静态资源
CacheFilter
<filter>
	<filter-name></filter-name>
	<filter-class></filter-class>
	<init-param>
		
	</init-param>
</filter>
public class CacheFilter implements Filter{
	private FilterConfig config;

	public void doFilter(req, resp, FilterChain chain) {
		// 获取用户访问的资源
		String url = request.getRequestURL();
		// 获取资源的缓存时间
		int expires = 0;
		if(url.endswith(".jpg")) {
			expires = Integer.parseInt(this.config.getInitParamter("jpg"));
		} else if (url.endsWith(".css")) (
			expires = Integer.parseInt(this.config.getInitParamter("css"));
		) else {
			expires = Integer.parseInt(this.config.getInitParamter("js"));
		}

		response.setDataHeader("expires", expires * 60 * 1000) // 分钟转秒
		chain.doFIlter(request, response);
	}

	public void init (FilterConfig config) {
		this.config = config;
	}
}

实现用户自动登录
	用户登陆成功之后，发送一个cookie，cookie的值为用户名喝md5加密后的密码

	login.jsp:
	<form action=''>
		用户名：<input type='text' name='username' />
		密码：<input type='password' name='password' />
		有效期：
		1分钟<input type='radio' name='autologin' value='${1 * 60}'/>
		5分钟<input type='radio' name='autologin' value='${5 * 60}'/>
		10分钟<input type='radio' name='autologin' value='${10 * 60}'/>
		<br/>
		<input type='submit' value='登陆' />
	</form>

	LonginServlet

	String username = req.getParameter("username");
	String password = req.getParameter("password");
	BusinessService service = new BusinessService();
	User user = service.login(username, password);

	if(user != null) {
		request.setAttribute("message", "用户名或密码错误");
		// 跳转
	}

	int time = Integer.parseInt(req.getParameter("time"));

	request.getSession().setAttribute("user", user);
	// 给客户端发送cookie
	Cookie cookie = markCookid();
	resp.addCookie(cookie);

	public Cookie makeCookie(username, password, expiresttime) {
		String cookieValue = username + ":" + expiresttime + md5(username, password, expiresttime);
		Cookie cookie = new Cookie("autologin", cookieValue);
		cookie.setMaxAge(expirestime);
		cookie.setPath("/");
		return cookie;
	}
	

	public String md5(String username, string password, int expirestime) {
		String value = password + ":" + expirestime + ":" + username;
		MessageDigest md = MessageDigest.getInstance("md5");
		byte[] md5 = md.digest(value.getBytes());
		BASE64Encoder encode = new BASE64Encoder();
		return encode.encode(md5);
		return null;
	}

	resp.sendRedirect("");

	BusinessService

	public class BusinessService {
		private static List<User> list = new ArrayList();
		static {
			list.add(new User());
			list.add(new User());
		}

		public User login(String username, String password) {
			for(User user : list) {
				if(user.getUsername().equals(username) && user.getPassword().equals(password)){
					return user;
				}
			}
		}
	}

	filter 代码
	public void doFilter(req, resp, chain) {
		// 1. 检查用户是否登陆
		User user = req.getSession.getAttribute("user");
		if(user != null) {
			chain.doFilter(req, resp);
			return;
		}
		// 获得用户的cookie
		Cookie autoCookie = null;
		Cookie cookies[] = req.getCookies();
		for(Cookie cookie : cookies) {
			if(cookie.getName().equals("autologin")) {
				autoCookie = cookie;
			}
		}
		if(autoCookie == null) {
			chain.doFilter(req, resp);
			return;
		}
		// 检查有效期
		// 检查有效性
	}
filter 部署
	注册filter 映射filter
	用<filter-mapping>映射
	<filter-mapping>
		<sevlet-name>
		<despatcher>
	</filter-mapping>
	despatcher标签标示拦截方式
		可以配置多个despatcher标签
		REQUEST 请求方式调用的时候 拦截 默认方式 nocachefilter 
		FORWARD forward方式访问
		INCLUDE include方式访问 生效
		ERROR 错误方式调用
Filter 高级开发
	可以多request 和response 增强
	1. 子类的方式增强，不可行，没有request中的客户端请求数据
	2. 包装设计模式
	3. 动态代理方式

	增强request方式处理乱码问题

	class MyRequest implements HttpServletRequest{
		private HttpServletRequest request;
		public MyRequest(HttpServletRequest) {
			this.request = request;
		}
		public String getParameter(String name) {
			String value = request.getParameter(name);
			if(!request.getMethod().equalsIgnoreCase("get")) {
				return value;
			}
			if(value == null) {
				return null;
			}
			value = new String(value.getBytes("iso8859-1"), "utf-8");
			return value;
		}
	}
	
	// 继承默认包装类
	class MyRequest extends HttpServletRequestWrapper {

		private HttpServletRequest request;
		public MyRequest(HttpServletRequest request) {
			super(request);
			this.request = request;
		}
	}

filter转义
	
	public void doFilter(req, resp) {
		
	}

	class MyRequest extends HttpServletRequestWrapper {
		private HttpServletRequest request;

		public MyRequest(request) {
			super(request);
			this.request = request;'
		}

		public String getParameter(String name) {
			String value = this.request.getParameter(name);
			if(value == null) {
				return null;
			}
			// tomcat/webapps/exam/WEB-INF/classes/util/htmlfilter


		}
	}
