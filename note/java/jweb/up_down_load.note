1. 文件上传
	1. 从web页面中添加上传输入项
		<input type='file'> 
		1. 必须要设置input输入项的name属性。
		2. 必须吧form的enctype属性的值设定为multipart/form-data，设置以后，浏览器在上传文件时，将把数据附带在http请求消息体中，并使用mime协议对上传的文件进行描述，以方便接收，对上传数据进行解析和处理。
	2. 在servlet中读取上传文件的数据，并保存到本地硬盘中

	表单类型为multipart/form-data 不能用传统方式获取数据
	需要用request获取数据流
		InputStream in = request.getInputStream();
		int len = 0;
		byte buffer[] new byte[1024];
		while((len = in.read(buffer)) > 0) {
			System.out.println(new String(buffer, 0, len));
		}
	倒入jar包
		commons.fileeupload  commoons-io

		public void doPost(HttpServletRequest req, HttpServletResponse resp) {
			DiskFileItemFactory factory = new DisFileItemFactory();
			ServletFileUpload upload = new ServletFileUpload(factory);
			upload.setHeaderEncoding("UTF-8");

			List<FileItem> list = upload.parseRequest(request);
			for(FileItem item : list) {
				if(item.isFormField()) {
					String inputName = item.getFieldName();
					String inputValue = item.getString();
					System.out.println(inputName + "=" + inputValue);
				} else {
					String filename = item.getName().substring(item.getName().lastIndexOf("\\") + 1);
					InputStream in = item.getInputStream();
					int len = 0;
					byte buffer[] = new byte[1024];
					FileOutputStream out = new FileOutputStream("...");
					while((len = in.read(buffer)) > 0) {
						out.write(buffer, 0 , len);
					}
				}
			}
		}
	中文乱码问题：
		upload.setHeaderEncoding("UTF-8"); // 上传文件乱码
		inpuValue = new String(inputValue.getBytes("iso8859-1"), "UTF-8"); // 普通字段乱码

	判断是不是multipart/form-data
		// 处理表单之前要调用upload.isMultipartContent(request)方法，判断表单提交的类型
		if(!upload.isMultipartContent(request)) {
			// 不是multipart
		} else {
			// 是multipart
		}
	上传文件大小
		默认为10k
		factory.setSizeThreshoid(1024 * 1024); // 1M
		factory.setRepository(new File()); // 如果超过文件大小，设置临时保存目录
		item.delete(); // 在流关闭以后执行，删除临时文件，应该在finally块中
		上传文件的保存目录，绝对不能让外界访问到 保存到WEB-INF目录中
	限制上传文件的类型
		获取到文件名以后，判断上传文件的后缀名是否是允许的
	限制文件的大小
		upload.setFileSizeMax(long fileSizeMx); // 单个文件的大小 单位是 字节, 如果超出，会抛异常 FileUploadBase.FileSizeLimitExcededException
		upload.setSizeMax(); // 设置上传文件的总大小
	判断输入项为空
		fileName == null || "".equals(fileName); continue;
	为每一个文件设置唯一文件名
		public String generateFileName(String fileName) {
			// UUID.randomUUID().toString();
			return UUID.randomUUID().toString() + "_" + fileName;
		}
	与平台无关的处理
		分隔符	使用File.separator
	存放文件分类
		为避免一个文件夹下保存超过1000个文件，影响文件访问性能，程序应该把文件打散后存储
		public String generateSavePath(String path, String filename) {
			int hashcode = filename.hashcode();
			int dir1 = hashcode & 15;
			int dir2 = (hashcode >> 4) && 0xf;
			String savePath = path + File.separator + dir1 + File.separator + dir2;
			File file = new File(savePath);
			if(!file.exists()) {
				file.mkdirs();
			}
			return savePath;
		}
	上传进度
		upload.setProgressListener(); //添加监听器

		public interface ProgressListener 接口

		pBytesRead: 解析器已读取的数据 长度
		pContentLenth	总数据长度
		upload.setProgressListener(new ProgressListener(){
			public void update(long pBytesRead, long, pContentLength, int pItems) {
				System.out.println("当前已解析：" + pBytesRead);
			}
		});
	在web页面中添加动态输入项

文件下载
	1. 列出所有文件
		public void doGet(HttpServletRequest request, HttpServletResponse response) {
			String path = this.getSerlvetContext().getRealPath("/WEB-INF/upload");
			Map map = new HashMap();
			listFile(new File(path), map);
			request.setAttribute("map", map);
			request.getRequestDispatcher("/listfile.jsp").forward(request, response);

		}

		public void listFile(File file, Map map) {
			if(!file.isFile()){
				File children[] = file.listFiles();
				for(File f : children) {
					listFile(f, map);
				}
			} else {
				String filename = file.getName().substring(file.getName().indexOf("_") + 1);
				map.put(file.getName(), filename) // <a href="/serlvet?filename=服务器中的文件名">原始文件名</a>
			}
		}

		response.setHeader("content-disposition", "attachment;filename=" + URLEncoder.encode(filename, "utf-8"));
